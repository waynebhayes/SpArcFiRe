#!/bin/bash
################## SKELETON: DO NOT TOUCH THESE 2 LINES
EXEDIR=`dirname "$0"`; BASENAME=`basename "$0" .sh`; TAB='	'; NL='
'
#################### ADD YOUR USAGE MESSAGE HERE, and the rest of your code after END OF SKELETON ##################
THRESH=0.001
USAGE="USAGE: $BASENAME [-a NUM | -r NUM] file1 file2
PURPOSE: given 2 filenames, compare them word-by-word for numerical differences."

################## SKELETON: DO NOT TOUCH CODE HERE
# check that you really did add a usage message above
USAGE=${USAGE:?"$0 should have a USAGE message before sourcing skel.sh"}
die(){ echo "$USAGE${NL}FATAL ERROR in $BASENAME:" "$@" >&2; exit 1; }
[ "$BASENAME" == skel ] && die "$0 is a skeleton Bourne Shell script; your scripts should source it, not run it"
echo "$BASENAME" | grep "[ $TAB]" && die "Shell script names really REALLY shouldn't contain spaces or tabs"
[ $BASENAME == "$BASENAME" ] || die "something weird with filename in '$BASENAME'"
warn(){ (echo "WARNING: $@")>&2; }
not(){ if eval "$@"; then return 1; else return 0; fi; }
newlines(){ awk '{for(i=1; i<=NF;i++)print $i}' "$@"; }
parse(){ awk "BEGIN{print $*}" </dev/null; }
which(){ echo "$PATH" | tr : "$NL" | awk '!seen[$0]{print}{++seen[$0]}' | while read d; do eval /bin/ls $d/$N; done 2>/dev/null | newlines; }

# Temporary Filename + Directory (both, you can use either, note they'll have different random stuff in the XXXXXX part)
BIGTMP=`for i in /scratch/preserve/RaidZ3/tmp /var/tmp /scratch/preserve /var/tmp /tmp; do mkdir -p "$i/wayne" && (df $i | awk 'NR==1{for(av=1;av<=NF;av++)if(match($av,"[Aa]vail"))break;}NR>1{print $av,"'"$i"'"}'); done 2>/dev/null | sort -nr | awk 'NR==1{print $2}'`
[ "$MYTMP" ] || MYTMP="$BIGTMP/wayne"
TMPDIR=`mktemp -d $MYTMP/$BASENAME.XXXXXX`
 trap "/bin/rm -rf $TMPDIR; exit" 0 1 2 3 15 # call trap "" N to remove the trap for signal N

#################### END OF SKELETON, ADD YOUR CODE BELOW THIS LINE

[ $# -eq 2 -a -e "$1" -a -e "$2" ] || die "expecting exactly 2 filenames"

gawk 'BEGIN{thresh='$THRESH'; relative=1}
    {
	line[ARGIND][FNR]=$0;
	for(i=1;i<=NF;i++){
	    word[ARGIND][FNR][i]=$i;
	    if(1*$i == $i){
		++count[ARGIND];
		num[ARGIND][count[ARGIND]]=$i;
		lineOf[ARGIND][count[ARGIND]]=FNR;
		wordOf[ARGIND][count[ARGIND]]=i;
	    }
	}
    }
    function ABS(x) {x=1*x; if(x>=0) return x; else return -x}
    function MIN(x,y) {if(x<y) return x; else return y}
    function MAX(x,y) {if(x>y) return x; else return y}
    function LineDiff(i,s) {
	exitCode=1;
	if(!printed[lineOf[1][i]]) {
	    ++printed[lineOf[1][i]];
	    printf "difference found between line %d of file1 and line %d of file2:\n", lineOf[1][i], lineOf[2][i]
	    printf "< %s\n> %s\n", line[1][lineOf[1][i]], line[2][lineOf[2][i]]
	}
	printf "%s: word %d [%s] != word %d [%s]\n", s, wordOf[1][i], num[1][i], wordOf[2][i], num[2][i]
    }
    END {
	exitCode=0;
	if(count[1] != count[2]) {++exitCode; printf "file1 has %d numbers but file2 has %d\n", count[1], count[2]}
	for(i=1; i<=count[1]; i++) {
	    if(num[1][i] == 0 && num[2][i] == 0) continue;
	    if(num[1][i] == 0 || num[2][i] == 0) LineDiff(i,"cannot compare zero to nonzero");
	    diff = ABS(num[1][i] - num[2][i]);
	    if(relative) diff /= MIN(ABS(num[1][i]),ABS(num[2][i]));
	    if(diff > thresh) LineDiff(i, "difference above threshold");
	}
	exit(exitCode);
    }' "$@"
